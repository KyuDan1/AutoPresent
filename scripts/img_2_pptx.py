# This code converts the image generated by diffusion models to pptx files, using OCR to get the text.
import os
from pptx import Presentation
from pptx.util import Pt
from PIL import Image
import pytesseract

# Base directory to search through
base_dir = '../slidesbench/examples'

def create_ppt_with_image_and_text(image_path, output_path):
    prs = Presentation()
    
    # Slide dimensions (in EMU units)
    slide_width = prs.slide_width
    slide_height = prs.slide_height

    # Open the image and get its dimensions in pixels
    img = Image.open(image_path)
    img_width, img_height = img.size

    # Calculate scaling factors to map image coordinates to slide coordinates
    x_ratio = slide_width / img_width
    y_ratio = slide_height / img_height

    # Add a blank slide layout (layout index 6 is usually blank)
    slide_layout = prs.slide_layouts[6]
    slide = prs.slides.add_slide(slide_layout)

    # Add the image to the slide, covering the entire slide
    slide.shapes.add_picture(image_path, 0, 0, width=slide_width, height=slide_height)

    # Perform OCR to get detailed data including positions
    ocr_data = pytesseract.image_to_data(img, output_type=pytesseract.Output.DICT)

    # Group words by line number to form text lines
    lines = {}
    n_boxes = len(ocr_data['level'])
    for i in range(n_boxes):
        if ocr_data['level'][i] == 5:  # Level 5 corresponds to word level
            text = ocr_data['text'][i].strip()
            if text:
                line_num = ocr_data['line_num'][i]
                x = ocr_data['left'][i]
                y = ocr_data['top'][i]
                w = ocr_data['width'][i]
                h = ocr_data['height'][i]

                if line_num not in lines:
                    lines[line_num] = {
                        'x_min': x,
                        'y_min': y,
                        'x_max': x + w,
                        'y_max': y + h,
                        'text': text
                    }
                else:
                    lines[line_num]['x_min'] = min(lines[line_num]['x_min'], x)
                    lines[line_num]['y_min'] = min(lines[line_num]['y_min'], y)
                    lines[line_num]['x_max'] = max(lines[line_num]['x_max'], x + w)
                    lines[line_num]['y_max'] = max(lines[line_num]['y_max'], y + h)
                    lines[line_num]['text'] += ' ' + text

    # Overlay text boxes on the slide
    for line in lines.values():
        x = line['x_min']
        y = line['y_min']
        w = line['x_max'] - line['x_min']
        h = line['y_max'] - line['y_min']
        text = line['text']

        # Map image coordinates to slide coordinates
        x_slide = int(x * x_ratio)
        y_slide = int(y * y_ratio)
        w_slide = int(w * x_ratio)
        h_slide = int(h * y_ratio)

        # Add a text box with the extracted text
        textbox = slide.shapes.add_textbox(x_slide, y_slide, w_slide, h_slide)
        text_frame = textbox.text_frame
        text_frame.text = text

        # Optional: Customize the text font and size
        for paragraph in text_frame.paragraphs:
            for run in paragraph.runs:
                run.font.size = Pt(12)
                run.font.name = 'Arial'

    # Save the presentation
    prs.save(output_path)
    print(f"Saved {output_path}")

# Walk through each subdirectory in the base directory
for root, dirs, files in os.walk(base_dir):
    # Check if 'dalle.png' exists in the current directory
    if 'dalle.png' in files:
        image_path = os.path.join(root, 'dalle.png')
        output_path = os.path.join(root, 'dalle.pptx')
        
        # Create and save the PowerPoint presentation with the image and text boxes
        create_ppt_with_image_and_text(image_path, output_path)
